// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/assistant/embedded/v1alpha2/embedded_assistant.proto

package com.google.assistant.embedded.v1alpha2;

/**
 * <pre>
 * Specifies the desired format for the server to use when it returns
 * `screen_out` response.
 * </pre>
 *
 * Protobuf type {@code google.assistant.embedded.v1alpha2.ScreenOutConfig}
 */
public  final class ScreenOutConfig extends
    com.google.protobuf.GeneratedMessageLite<
        ScreenOutConfig, ScreenOutConfig.Builder> implements
    // @@protoc_insertion_point(message_implements:google.assistant.embedded.v1alpha2.ScreenOutConfig)
    ScreenOutConfigOrBuilder {
  private ScreenOutConfig() {
  }
  /**
   * <pre>
   * Possible modes for visual screen-output on the device.
   * </pre>
   *
   * Protobuf enum {@code google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode}
   */
  public enum ScreenMode
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * No video mode specified.
     * The Assistant may respond as if in `OFF` mode.
     * </pre>
     *
     * <code>SCREEN_MODE_UNSPECIFIED = 0;</code>
     */
    SCREEN_MODE_UNSPECIFIED(0),
    /**
     * <pre>
     * Screen is off (or has brightness or other settings set so low it is
     * not visible).
     * The Assistant will typically not return a screen response in this
     * mode.
     * </pre>
     *
     * <code>OFF = 1;</code>
     */
    OFF(1),
    /**
     * <pre>
     * Screen is on, but no video is currently playing. It may be displaying
     * a paused video or a static picture or a "screen-saver" type animation.
     * The Assistant will typically return a screen response in this mode and
     * may use full screen mode.
     * </pre>
     *
     * <code>PAUSED = 2;</code>
     */
    PAUSED(2),
    /**
     * <pre>
     * A video or live feed is playing on screen. The Assistant will typically
     * return a partial-screen response in this mode.
     * </pre>
     *
     * <code>PLAYING = 3;</code>
     */
    PLAYING(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * No video mode specified.
     * The Assistant may respond as if in `OFF` mode.
     * </pre>
     *
     * <code>SCREEN_MODE_UNSPECIFIED = 0;</code>
     */
    public static final int SCREEN_MODE_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Screen is off (or has brightness or other settings set so low it is
     * not visible).
     * The Assistant will typically not return a screen response in this
     * mode.
     * </pre>
     *
     * <code>OFF = 1;</code>
     */
    public static final int OFF_VALUE = 1;
    /**
     * <pre>
     * Screen is on, but no video is currently playing. It may be displaying
     * a paused video or a static picture or a "screen-saver" type animation.
     * The Assistant will typically return a screen response in this mode and
     * may use full screen mode.
     * </pre>
     *
     * <code>PAUSED = 2;</code>
     */
    public static final int PAUSED_VALUE = 2;
    /**
     * <pre>
     * A video or live feed is playing on screen. The Assistant will typically
     * return a partial-screen response in this mode.
     * </pre>
     *
     * <code>PLAYING = 3;</code>
     */
    public static final int PLAYING_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ScreenMode valueOf(int value) {
      return forNumber(value);
    }

    public static ScreenMode forNumber(int value) {
      switch (value) {
        case 0: return SCREEN_MODE_UNSPECIFIED;
        case 1: return OFF;
        case 2: return PAUSED;
        case 3: return PLAYING;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ScreenMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ScreenMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ScreenMode>() {
            public ScreenMode findValueByNumber(int number) {
              return ScreenMode.forNumber(number);
            }
          };

    private final int value;

    private ScreenMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode)
  }

  public static final int SCREEN_MODE_FIELD_NUMBER = 1;
  private int screenMode_;
  /**
   * <pre>
   * Current visual screen-mode for the device while issuing the query.
   * </pre>
   *
   * <code>optional .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;</code>
   */
  public int getScreenModeValue() {
    return screenMode_;
  }
  /**
   * <pre>
   * Current visual screen-mode for the device while issuing the query.
   * </pre>
   *
   * <code>optional .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;</code>
   */
  public com.google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode getScreenMode() {
    com.google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode result = com.google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode.forNumber(screenMode_);
    return result == null ? com.google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode.UNRECOGNIZED : result;
  }
  /**
   * <pre>
   * Current visual screen-mode for the device while issuing the query.
   * </pre>
   *
   * <code>optional .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;</code>
   */
  private void setScreenModeValue(int value) {
      screenMode_ = value;
  }
  /**
   * <pre>
   * Current visual screen-mode for the device while issuing the query.
   * </pre>
   *
   * <code>optional .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;</code>
   */
  private void setScreenMode(com.google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode value) {
    if (value == null) {
      throw new NullPointerException();
    }
    
    screenMode_ = value.getNumber();
  }
  /**
   * <pre>
   * Current visual screen-mode for the device while issuing the query.
   * </pre>
   *
   * <code>optional .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;</code>
   */
  private void clearScreenMode() {
    
    screenMode_ = 0;
  }

  public static final int ACCESSIBILITY_OPTIONS_FIELD_NUMBER = 2;
  private com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions accessibilityOptions_;
  /**
   * <pre>
   * Accessibility options for the visual output.
   * </pre>
   *
   * <code>optional .google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions accessibility_options = 2;</code>
   */
  public boolean hasAccessibilityOptions() {
    return accessibilityOptions_ != null;
  }
  /**
   * <pre>
   * Accessibility options for the visual output.
   * </pre>
   *
   * <code>optional .google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions accessibility_options = 2;</code>
   */
  public com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions getAccessibilityOptions() {
    return accessibilityOptions_ == null ? com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions.getDefaultInstance() : accessibilityOptions_;
  }
  /**
   * <pre>
   * Accessibility options for the visual output.
   * </pre>
   *
   * <code>optional .google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions accessibility_options = 2;</code>
   */
  private void setAccessibilityOptions(com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions value) {
    if (value == null) {
      throw new NullPointerException();
    }
    accessibilityOptions_ = value;
    
    }
  /**
   * <pre>
   * Accessibility options for the visual output.
   * </pre>
   *
   * <code>optional .google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions accessibility_options = 2;</code>
   */
  private void setAccessibilityOptions(
      com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions.Builder builderForValue) {
    accessibilityOptions_ = builderForValue.build();
    
  }
  /**
   * <pre>
   * Accessibility options for the visual output.
   * </pre>
   *
   * <code>optional .google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions accessibility_options = 2;</code>
   */
  private void mergeAccessibilityOptions(com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions value) {
    if (accessibilityOptions_ != null &&
        accessibilityOptions_ != com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions.getDefaultInstance()) {
      accessibilityOptions_ =
        com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions.newBuilder(accessibilityOptions_).mergeFrom(value).buildPartial();
    } else {
      accessibilityOptions_ = value;
    }
    
  }
  /**
   * <pre>
   * Accessibility options for the visual output.
   * </pre>
   *
   * <code>optional .google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions accessibility_options = 2;</code>
   */
  private void clearAccessibilityOptions() {  accessibilityOptions_ = null;
    
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (screenMode_ != com.google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode.SCREEN_MODE_UNSPECIFIED.getNumber()) {
      output.writeEnum(1, screenMode_);
    }
    if (accessibilityOptions_ != null) {
      output.writeMessage(2, getAccessibilityOptions());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (screenMode_ != com.google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode.SCREEN_MODE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, screenMode_);
    }
    if (accessibilityOptions_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getAccessibilityOptions());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.assistant.embedded.v1alpha2.ScreenOutConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.assistant.embedded.v1alpha2.ScreenOutConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.assistant.embedded.v1alpha2.ScreenOutConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.assistant.embedded.v1alpha2.ScreenOutConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.assistant.embedded.v1alpha2.ScreenOutConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.assistant.embedded.v1alpha2.ScreenOutConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.assistant.embedded.v1alpha2.ScreenOutConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.assistant.embedded.v1alpha2.ScreenOutConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.assistant.embedded.v1alpha2.ScreenOutConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.assistant.embedded.v1alpha2.ScreenOutConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.assistant.embedded.v1alpha2.ScreenOutConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Specifies the desired format for the server to use when it returns
   * `screen_out` response.
   * </pre>
   *
   * Protobuf type {@code google.assistant.embedded.v1alpha2.ScreenOutConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.assistant.embedded.v1alpha2.ScreenOutConfig, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.assistant.embedded.v1alpha2.ScreenOutConfig)
      com.google.assistant.embedded.v1alpha2.ScreenOutConfigOrBuilder {
    // Construct using com.google.assistant.embedded.v1alpha2.ScreenOutConfig.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Current visual screen-mode for the device while issuing the query.
     * </pre>
     *
     * <code>optional .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;</code>
     */
    public int getScreenModeValue() {
      return instance.getScreenModeValue();
    }
    /**
     * <pre>
     * Current visual screen-mode for the device while issuing the query.
     * </pre>
     *
     * <code>optional .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;</code>
     */
    public Builder setScreenModeValue(int value) {
      copyOnWrite();
      instance.setScreenModeValue(value);
      return this;
    }
    /**
     * <pre>
     * Current visual screen-mode for the device while issuing the query.
     * </pre>
     *
     * <code>optional .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;</code>
     */
    public com.google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode getScreenMode() {
      return instance.getScreenMode();
    }
    /**
     * <pre>
     * Current visual screen-mode for the device while issuing the query.
     * </pre>
     *
     * <code>optional .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;</code>
     */
    public Builder setScreenMode(com.google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode value) {
      copyOnWrite();
      instance.setScreenMode(value);
      return this;
    }
    /**
     * <pre>
     * Current visual screen-mode for the device while issuing the query.
     * </pre>
     *
     * <code>optional .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;</code>
     */
    public Builder clearScreenMode() {
      copyOnWrite();
      instance.clearScreenMode();
      return this;
    }

    /**
     * <pre>
     * Accessibility options for the visual output.
     * </pre>
     *
     * <code>optional .google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions accessibility_options = 2;</code>
     */
    public boolean hasAccessibilityOptions() {
      return instance.hasAccessibilityOptions();
    }
    /**
     * <pre>
     * Accessibility options for the visual output.
     * </pre>
     *
     * <code>optional .google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions accessibility_options = 2;</code>
     */
    public com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions getAccessibilityOptions() {
      return instance.getAccessibilityOptions();
    }
    /**
     * <pre>
     * Accessibility options for the visual output.
     * </pre>
     *
     * <code>optional .google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions accessibility_options = 2;</code>
     */
    public Builder setAccessibilityOptions(com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions value) {
      copyOnWrite();
      instance.setAccessibilityOptions(value);
      return this;
      }
    /**
     * <pre>
     * Accessibility options for the visual output.
     * </pre>
     *
     * <code>optional .google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions accessibility_options = 2;</code>
     */
    public Builder setAccessibilityOptions(
        com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions.Builder builderForValue) {
      copyOnWrite();
      instance.setAccessibilityOptions(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Accessibility options for the visual output.
     * </pre>
     *
     * <code>optional .google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions accessibility_options = 2;</code>
     */
    public Builder mergeAccessibilityOptions(com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions value) {
      copyOnWrite();
      instance.mergeAccessibilityOptions(value);
      return this;
    }
    /**
     * <pre>
     * Accessibility options for the visual output.
     * </pre>
     *
     * <code>optional .google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions accessibility_options = 2;</code>
     */
    public Builder clearAccessibilityOptions() {  copyOnWrite();
      instance.clearAccessibilityOptions();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.assistant.embedded.v1alpha2.ScreenOutConfig)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.assistant.embedded.v1alpha2.ScreenOutConfig();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.assistant.embedded.v1alpha2.ScreenOutConfig other = (com.google.assistant.embedded.v1alpha2.ScreenOutConfig) arg1;
        screenMode_ = visitor.visitInt(screenMode_ != 0, screenMode_,    other.screenMode_ != 0, other.screenMode_);
        accessibilityOptions_ = visitor.visitMessage(accessibilityOptions_, other.accessibilityOptions_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();

                screenMode_ = rawValue;
                break;
              }
              case 18: {
                com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions.Builder subBuilder = null;
                if (accessibilityOptions_ != null) {
                  subBuilder = accessibilityOptions_.toBuilder();
                }
                accessibilityOptions_ = input.readMessage(com.google.assistant.embedded.v1alpha2.ScreenAccessibilityOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(accessibilityOptions_);
                  accessibilityOptions_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.assistant.embedded.v1alpha2.ScreenOutConfig.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.ScreenOutConfig)
  private static final com.google.assistant.embedded.v1alpha2.ScreenOutConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ScreenOutConfig();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.assistant.embedded.v1alpha2.ScreenOutConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ScreenOutConfig> PARSER;

  public static com.google.protobuf.Parser<ScreenOutConfig> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

